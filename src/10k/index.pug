html(lang="en")
    head
        include /src/base/head.pug
        title.
            Avoiding website bloat
        style: include index.css
    body
        h1.
            Avoiding website bloat
        p.
            As our devices get faster and better, and web standards and
            technologies improve, so too do the websites we visit.
        p.
            â€¦by some measures. Certainly, it has never before been possible to
            create web experiences with such interactivity and depth. Yet,
            websites have also never before been as bloated with distracting
            ads, huge images, and invasive tracking scripts and cookies.
            Increased processing power is offset by ever-huger websites.
        -
            const amp = "https://www.ampproject.org"
                , ins = "https://instantarticles.fb.com"
                , woc = "http://idlewords.com/talks/website_obesity.htm"
                , mws = "http://motherfuckingwebsite.com"
                , bmw = "http://bettermotherfuckingwebsite.com"
                , c5k = "http://www.the5k.org/about.php"
                , c1k = "https://a-k-apart.com"
        p.
            Much has been said on this website obesity crisis. Major tech
            companies have brought their proposed solutions
            (#[a(href=amp) one], #[a(href=ins) two]) to the table. Designers
            have expressed their frustration with "heavy" websites
            (#[a(href=woc) one], #[a(href=mws) two], #[a(href=bmw) three]).
            Competitions have been created to encourage the practice of
            reducing website size as much as possible (#[a(href=c5k) one],
            #[a(href=c1k) two]).
        p.
            How, then, can one craft a website, while making sure it is as
            small as possible and loads as quickly as possible?
        h2.
            Minification
        p.
            A file of source code can be transformed into a new file which
            conveys the exact same set of instructions to the computer, but is
            smaller. This process of transformation is called minification.
        p.
            Consider this small CSS file:
        pre: code.
            html {
                color: #333;
                font: 18px/1.5 Georgia, serif;
            }

            body {
                max-width: 40em;
                margin: 0 auto;
                padding: 10px;
            }
        p.
            With the use of a minifier, we can create a minified version of
            this file.
        pre: code.
            html{color:#333;font:18px/1.5 Georgia,serif}body{max-width:40em;margin:0 auto;padding:10px}
        p.
            The original file and the minified file instruct the computer to do
            exactly the same things. The original file is clearly superior for
            human programmers to work with, but since the minified file is
            smaller, it should be served to users.
        p.
            Bear in mind that while we have reduced the size of this file, no
            meaning is lost. Then, one can view minification as a form of
            lossless compression. Speaking of which,
        h2.
            Compression
        h3.
            Lossless
        p.
            Any file can be transformed into a new file by identifying
            repeating patterns in the file, and encoding these patterns. This
            avoids redundancies in the file, decreasing its size. This process
            of transformation is called lossless compression.
        p.
            In the specific case of lossless compression, again, no data is
            lost (hence the name). By applying a reverse transformation, we can
            get back the original file.
        -
            const gzp = "http://www.gzip.org"
                , dfl = "https://en.wikipedia.org/wiki/DEFLATE"
        p.
            #[code: a(href=gzp) gzip] is a program that uses an algorithm
            called #[a(href=dfl) DEFLATE] to compress files. Servers can be
            configured to automatically #[code gzip] source files and serve
            these compressed files to users, whose computers then decompress
            the compressed file.
        h3.
            Lossy
        -
            const tpg = "https://tinypng.com"
        p.
            Some files like images and videos can be compressed lossily. Lossy
            compression algorithms remove unnecessary or less important data
            from files, creating a new, smaller file. In this case, data
            #[em is] lost, but #[a(href=tpg) many] lossy compression algorithms
            are quite good at only removing data whose absence a user wouldn't
            notice.
        h2.
            Inlining
        p.
            A HTML document can request other documents with #[code link href]
            or #[code script src].
        pre: code.
            bar
        script: include index.js
